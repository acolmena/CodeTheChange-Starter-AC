{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","calculate_win.js","index.js"],"names":["Board","squares","onClick","Game","useState","Array","fill","board","setBoard","stepNumber","setStepNumber","xIsNext","setXisNext","winner","possibleWins","i","length","a","b","c","calculateWinner","nextPlay","placesTaken","slice","curLoc","locCopy","className","result","ReactDom","render","document","getElementById"],"mappings":"6MAEA,ICyBeA,EAbD,SAAC,GAAD,EAAEC,QAAF,EAAWC,SCkEVC,EApEF,WAAM,MAKSC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QALjC,mBAKVC,EALU,KAKHC,EALG,OAOmBJ,mBAAS,GAP5B,mBAOVK,EAPU,KAOEC,EAPF,OAQaN,oBAAS,GARtB,mBAQVO,EARU,KAQDC,EARC,KAUXC,ECtBD,SAAyBZ,GAyB9B,IAtBA,IAAMa,EAAe,CACnB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAcAC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAAK,CAAC,IAAD,cAC1BD,EAAaC,GADa,GACrCE,EADqC,KAClCC,EADkC,KAC/BC,EAD+B,KAE5C,GAAIlB,EAAQgB,IAAMhB,EAAQgB,KAAOhB,EAAQiB,IAAMjB,EAAQgB,KAAOhB,EAAQkB,GACpE,OAAOlB,EAAQgB,GAGnB,OAAO,KDTQG,CAAgBb,EAAME,IAG/BY,EAAW,WAChB,OAAIV,EACK,IAEH,KAqCP,OACE,oCACA,2CACE,kBAAC,EAAD,CAAOV,QAASM,EAAME,GAAaP,QArCnB,SAACa,GACnB,IAAMO,EAAcf,EAAMgB,MAAM,EAAGd,EAAa,GAC1Ce,EAASF,EAAYb,GACrBgB,EAAO,YAAOD,GAEhBX,GAAUY,EAAQV,KACtBU,EAAQV,GAAKM,IACbb,EAAS,GAAD,mBAAKc,GAAL,CAAkBG,KAC1Bf,EAAcY,EAAYN,QAC1BJ,GAAYD,OA6BV,yBAAKe,UAAU,gBACX,6BACE,4BAAQxB,QA3BE,WAClBM,EAAS,CAACH,MAAM,GAAGC,KAAK,QACxBI,EAAc,GACdE,GAAW,KAwBH,gBAEF,4BAvBO,SAACC,GACd,OAAIA,EACK,WAAaA,EAAS,IAGZ,IAAfJ,GAA+B,OAAXI,EACb,YAGJ,gBAAkBQ,IAcdM,CAAOd,OEpEtBe,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.d7cb98ba.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = ({value, onClick}) => {\n  const style = value ? `squares ${value}` : `squares`;\n\n  return (\n    <button className= {style} onClick= {onClick}> \n    {value} \n    </button>\n     \n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\n//const squaresArray = [];\n\n// function displaySquares(squares, onClick) {\n//   const allSquares =  squares.map(i => \n//     <Square key = {i} value = {squares[i]}  onClick = {() => onClick(i)}/>\n//   );\n//   return allSquares;\n// }\n\n// or in div we can write the map\n\nconst Board = ({squares, onClick}) => (\n  // make array of square components\n  //let squaresArray = [{key: i, value = squares[i],  onClick = {() => onClick(i)}}] \n  //let squaresArray = [];\n  \n  \n  <div className=\"board\"> \n    {squares.map((square, i) => (\n    <Square key = {i} value = {square}  onClick = {() => onClick(i)} /> ))}\n  </div>\n  \n);\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport { calculateWinner } from \"../calculate_win\";\nimport Board from \"./Board\";\n\n// Function written to test Square\n// const test = () => {\n//   console.log('clicked square')\n// }\n\n\n//<Square value='X' onClick={() => test()} />\n\nconst Game = () => {\n  // Set up states and functions: position of Xs and Os on board,\n  // step number, whether X is next, is there a win or tie, etc.\n  \n  // Tracks value of each square\n  const [board, setBoard] = useState([Array(9).fill(null)]);\n  // zero-indexed value, indicates how many turns have been taken b4 current turn\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(true);\n  \n  const winner = calculateWinner(board[stepNumber]);\n  \n  // Create variable that holds 'X' or 'O' depending on whether X is next\n  const nextPlay = () => {\n   if (xIsNext) {\n     return 'X';\n   }\n   return'O';\n  };\n\n  const handleClick = (i) => { // need to fix \n    const placesTaken = board.slice(0, stepNumber + 1);\n    const curLoc = placesTaken[stepNumber];\n    const locCopy = [...curLoc]; // make copy\n    // prevents move from being taken if there's a winner already and/or square is taken\n    if (winner || locCopy[i] ) return; \n    locCopy[i] = nextPlay(); \n    setBoard([...placesTaken, locCopy]); // add new clicked square to board\n    setStepNumber(placesTaken.length); // add one to stepNumber\n    setXisNext(!xIsNext); // set next turn to what it's not currently\n  };\n  \n  // Reset board, no parameters \n  const jumpToStart = () => { // add if statement? i.e. if win...\n    setBoard([Array(9).fill(null)]);\n    setStepNumber(0);\n    setXisNext(true);\n  };\n\n  const result = (winner) => {\n    if (winner) {\n      return \"Winner: \" + winner + \"!\";\n    }\n\n    if (stepNumber === 9 && winner === null) {\n        return \"Tie Game!\";\n    } \n\n    return \"Next Player: \" + nextPlay(); \n    // winner ? \"Winner: \" + winner : \"Next Player: \" + nextPlay()\n\n  };\n  \n\n  return (\n    <>\n    <h1>Tic Tac Toe</h1>\n      <Board squares={board[stepNumber]} onClick={handleClick} />\n      <div className='info-wrapper'>\n          <div>\n            <button onClick={jumpToStart}>Go to Start</button>\n          </div>\n          <h3>{result(winner)}</h3>\n      </div>\n    </>  // why do we need these empty tags? If you don't want to render an actual element\n  );\n};\n\nexport default Game;\n","export function calculateWinner(squares) {\n  // TODO: Given a game board, calculate the winner.\n  // If there is no winner, you can return null.\n  const possibleWins = [\n    [0, 1, 2], \n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  // possibleWins.forEach((element) => \n  //   if (squares[element[0]] && squares[element[0]] == squares[element[1]] && squares[element[1]] == squares[element[2]]) {\n  //     return squares[element[0]];\n  //   }\n  // );\n  \n  // for (const [a, b, c] in possibleWins) {\n  //   if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n  //     return squares[a];\n  //   }\n  // }\n  for (let i = 0; i < possibleWins.length; i++) {\n    const [a, b, c] = possibleWins[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./components/Game\";\n\n\nReactDom.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}